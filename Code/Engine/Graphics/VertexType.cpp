#include "VertexType.h"
#include "RenderManager.h"
#include "Base.h"

LPDIRECT3DVERTEXDECLARATION9 TXYZ_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TCOLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TTEXTURE1_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TTEXTURE1_TEXTURE2_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TEXTURE1_VERTEX::s_VertexDeclaration=NULL;
//LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TEXTURE1_BUMPMAP_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TEXTURE1_TEXTURE2_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TTEXTURE1_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TTEXTURE1_TEXTURE2_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TEXTURE1_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TEXTURE1_TEXTURE2_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 CAL3D_HW_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TANGENT_BINORMAL_TEXTURED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 SCREEN_TEXTURE_COLORED_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 SCREEN_TEXTURE_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_VERTEX::s_VertexDeclaration=NULL;
LPDIRECT3DVERTEXDECLARATION9 TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_SPECULAR_VERTEX::s_VertexDeclaration=NULL;

// SCREEN_TEXTURE_VERTEX		
void SCREEN_TEXTURE_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & SCREEN_TEXTURE_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 16, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

// SCREEN_TEXTURE_COLORED_VERTEX		
void SCREEN_TEXTURE_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & SCREEN_TEXTURE_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 16, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			{ 0, 20, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

// TXYZ_VERTEX		
void TXYZ_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TXYZ_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TCOLORED_VERTEX
void TCOLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TCOLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR,0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TNORMAL_COLORED_VERTEX
void TNORMAL_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TTEXTURE1_VERTEX
void TTEXTURE1_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TTEXTURE1_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TTEXTURE1_TEXTURE2_VERTEX
void TTEXTURE1_TEXTURE2_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TTEXTURE1_TEXTURE2_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 20, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}



// TNORMAL_TEXTURE1_VERTEX
void TNORMAL_TEXTURE1_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TEXTURE1_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

/*
// TNORMAL_TEXTURE1_BUMPMAP_VERTEX 
void TNORMAL_TEXTURE1_BUMPMAP_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TEXTURE1_BUMPMAP_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,	&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}
*/


// TNORMAL_TEXTURE1_TEXTURE2_VERTEX
void TNORMAL_TEXTURE1_TEXTURE2_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TEXTURE1_TEXTURE2_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 32, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TTEXTURE1_COLORED_VERTEX
void TTEXTURE1_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TTEXTURE1_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 20, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TTEXTURE1_TEXTURE2_COLORED_VERTEX
void TTEXTURE1_TEXTURE2_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TTEXTURE1_TEXTURE2_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 20, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 1 },
			{ 0, 28, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TNORMAL_TEXTURE1_COLORED_VERTEX
void TNORMAL_TEXTURE1_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TEXTURE1_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 32, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// TNORMAL_TEXTURE1_TEXTURE2_COLORED_VERTEX
void TNORMAL_TEXTURE1_TEXTURE2_COLORED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TEXTURE1_TEXTURE2_COLORED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 24, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 32, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },
			{ 0, 40, D3DDECLTYPE_D3DCOLOR, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_COLOR, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}


// CAL3D_HW_VERTEX
void CAL3D_HW_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & CAL3D_HW_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =
		{
			{ 0, 0, D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BLENDWEIGHT, 0 },
			{ 0, 28, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BLENDINDICES, 0 },
			{ 0, 44, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 60, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TANGENT, 0 },
			{ 0, 76, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BINORMAL, 0 },
			{ 0, 92, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT, D3DDECLUSAGE_TEXCOORD, 0 },
			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

// TNORMAL_TANGENT_BINORMAL_TEXTURED_VERTEX
void TNORMAL_TANGENT_BINORMAL_TEXTURED_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}

LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TANGENT_BINORMAL_TEXTURED_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =			
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 28, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TANGENT, 0 },
			{ 0, 44, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BINORMAL, 0 },
			{ 0, 60, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

//TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_VERTEX
void TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}
LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =			
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 28, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TANGENT, 0 },
			{ 0, 44, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BINORMAL, 0 },
			{ 0, 60, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 68, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

//TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RADIOSITY_VERTEX
void TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}
LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =			
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 28, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TANGENT, 0 },
			{ 0, 44, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BINORMAL, 0 },
			{ 0, 60, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 68, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}

//TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RADIOSITY_SPECULAR_VERTEX
void TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_SPECULAR_VERTEX::ReleaseVertexDeclaration()
{
	CHECKED_RELEASE(s_VertexDeclaration);
}
LPDIRECT3DVERTEXDECLARATION9 & TNORMAL_TANGENT_BINORMAL_TEXTURE1_TEXTURE2_RNM_SPECULAR_VERTEX::GetVertexDeclaration()
{
	if(s_VertexDeclaration==NULL)
	{
		D3DVERTEXELEMENT9 l_VertexDeclaration[] =			
		{
			{ 0, 0 , D3DDECLTYPE_FLOAT3, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_POSITION, 0 },
			{ 0, 12, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_NORMAL, 0 },
			{ 0, 28, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TANGENT, 0 },
			{ 0, 44, D3DDECLTYPE_FLOAT4, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_BINORMAL, 0 },
			{ 0, 60, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 0 },
			{ 0, 68, D3DDECLTYPE_FLOAT2, D3DDECLMETHOD_DEFAULT,	D3DDECLUSAGE_TEXCOORD, 1 },

			D3DDECL_END()
		};
		CORE->GetRenderManager()->GetDevice()->CreateVertexDeclaration(l_VertexDeclaration,&s_VertexDeclaration);
	}
	return s_VertexDeclaration;
}